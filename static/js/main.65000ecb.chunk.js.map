{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","RabbitHolePage","withRouter","props","state","wikiData","firstPageTitle","isLoading","console","log","this","location","search","getMostRecentPage","startNewRabbithole","prevProps","wikiValue","URLSearchParams","get","wikiValueArray","split","mostRecentPage","length","fetchPage","text","replace","pageTitle","fetch","headers","then","resp","json","data","setState","randomTitleData","randomPageTitle","items","title","rabbitHolePath","lead","onClick","href","map","index","sections","section","dangerouslySetInnerHTML","__html","replaceLinks","id","remaining","line","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65000ecb.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n  withRouter,\n} from 'react-router-dom';\n\n// This site has 3 pages, all of which are rendered\n// dynamically in the browser (not server rendered).\n//\n// Although the page does not ever refresh, notice how\n// React Router keeps the URL up to date as you navigate\n// through the site. This preserves the browser history,\n// making sure things like the back button and bookmarks\n// work properly.\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        {/* <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n        </ul> */}\n\n        <hr />\n\n        {/* <a href=\"http://en.wikipedia.org/wiki/Special:Random\">Random Wiki Article</a> */}\n\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        {/* <Switch>\n          <Route exact path=\"/\">\n            <Home /> \n            <RabbitHole /> \n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n        </Switch> */}\n        <RabbitHolePage />\n      </div>\n    </Router>\n  );\n}\n\n// You can think of these components as \"pages\"\n// in your app.\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\nconst RabbitHolePage = withRouter(\n  class RabbitHole extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        wikiData: {},\n        firstPageTitle: '',\n        isLoading: null,\n      };\n    }\n\n    componentDidMount() {\n      console.log(this.props.location.search);\n      if (this.props.location.search) {\n        this.getMostRecentPage();\n      } else {\n        this.startNewRabbithole();\n      }\n    }\n\n    /**\n     * TODO Check for updates to the component so that we can detect\n     * when there are changes to the URL. In our case, we want\n     * to detect changes to the location search params and render\n     * the new Wikipedia component based on the last clicked link.\n     */\n    componentDidUpdate(prevProps) {\n      if (this.props.location.search !== prevProps.location.search) {\n        this.getMostRecentPage();\n      }\n    }\n\n    getMostRecentPage() {\n      const searchParams = new URLSearchParams(this.props.location.search);\n      const wikiValue = searchParams.get('wiki');\n\n      if (wikiValue) {\n        const wikiValueArray = wikiValue.split('|');\n        const mostRecentPage = wikiValueArray[wikiValueArray.length - 1];\n\n        this.fetchPage(mostRecentPage);\n      }\n    }\n\n    /**\n     * Replace links to `/wiki/` page in in API response with\n     * a URl search string instead. This allows us to update the\n     * URL value without navigating away from the page.\n     */\n    replaceLinks(text) {\n      if (!text) {\n        return text;\n      }\n\n      // Add onto the existing URL search string\n      const searchParams = new URLSearchParams(this.props.location.search);\n      const wikiValue = searchParams.get('wiki');\n\n      return text.replace(\n        /\\/wiki\\//g,\n        // Each page in the rabbit hole journey added to the links\n        // on the page, separated by \"|\"s.\n        // For example:\n        //  1. /wiki/Pet_door  ->  /#/?wiki=Pet_door\n        //  2. /wiki/Dog       ->  /#/?wiki=Pet_door|Dog\n        //  3. /wiki/Mammal    ->  /#/?wiki=Pet_door|Dog|Mammal\n        // TODO Handle if URL is too long, show message like\n        // \"you've been in the rabbit hole too long\"\n        `/#/?wiki=${\n          wikiValue ? `${wikiValue}` : `${this.state.firstPageTitle}`\n        }|`\n      );\n    }\n\n    fetchPage(pageTitle) {\n      fetch(\n        `https://en.wikipedia.org/api/rest_v1/page/mobile-sections/${pageTitle}`,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      )\n        .then((resp) => resp.json())\n        .then((data) => {\n          console.log('resp', data);\n\n          this.setState({ wikiData: data });\n        });\n    }\n\n    startNewRabbithole() {\n      this.setState({\n        wikiData: {},\n        firstPageTitle: '',\n        isLoading: true,\n      });\n      fetch(`https://en.wikipedia.org/api/rest_v1/page/random/title`, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((resp) => resp.json())\n        .then((randomTitleData) => {\n          const randomPageTitle = randomTitleData.items[0].title;\n          console.log('TITLE FETCH resp', randomPageTitle);\n          this.setState({\n            firstPageTitle: randomPageTitle,\n            isLoading: false,\n          });\n\n          //this.fetchPage(randomPageTitle);\n        });\n    }\n\n    render() {\n      var rabbitHolePath = [];\n      const searchParams = new URLSearchParams(this.props.location.search);\n      const wikiValue = searchParams.get('wiki');\n\n      if (wikiValue) {\n        rabbitHolePath = wikiValue.replace(/_/g, ' ').split('|');\n      }\n      console.log(rabbitHolePath);\n\n      return (\n        <div>\n          {this.state.isLoading && (\n            <div>\n              <p>Finding a way in!!!!!!!!!!!</p>\n            </div>\n          )}\n\n          {!this.state.isLoading &&\n            this.state.firstPageTitle &&\n            !this.state.wikiData.lead && (\n              <div>\n                <p> THis is ur way in:</p>\n                <p>\n                  <strong>\n                    {this.state.firstPageTitle.replace(/_/g, ' ')}\n                  </strong>\n                </p>\n                <div>\n                  <button\n                    onClick={() => this.fetchPage(this.state.firstPageTitle)}\n                  >\n                    Start here\n                  </button>\n                  <button onClick={() => this.startNewRabbithole()}>\n                    Show me another way in\n                  </button>\n                </div>\n              </div>\n            )}\n\n          {!this.state.isLoading &&\n            this.state.firstPageTitle &&\n            this.state.wikiData.lead && (\n              <div>\n                <a href=\"/#/\" onClick={() => this.startNewRabbithole()}>\n                  START OVER\n                </a>\n\n                <ul>\n                  {rabbitHolePath.map((pageTitle, index) => (\n                    <li key={index}>{pageTitle}</li>\n                  ))}\n                </ul>\n\n                {this.state.wikiData.lead &&\n                  this.state.wikiData.lead.sections &&\n                  this.state.wikiData.lead.sections.map((section) => (\n                    <div\n                      key={section.id}\n                      dangerouslySetInnerHTML={{\n                        __html: this.replaceLinks(section.text),\n                      }}\n                    />\n                  ))}\n\n                {this.state.wikiData.remaining &&\n                  this.state.wikiData.remaining.sections &&\n                  this.state.wikiData.remaining.sections.map((section) => (\n                    <div key={section.id}>\n                      <h2>{section.line}</h2>\n                      <div\n                        dangerouslySetInnerHTML={{\n                          __html: this.replaceLinks(section.text),\n                        }}\n                      />\n                    </div>\n                  ))}\n              </div>\n            )}\n        </div>\n      );\n    }\n  }\n);\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}